name: Build CLI Releases

permissions:
  contents: write

on:
  push:
    tags:
      - v_cli.*
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      changes: "无变更日志可用"
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: 获取版本号
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION=$(date -u +%Y-%m-%d-%H%M)
          else
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION/v_cli./}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: 为 workflow_dispatch 创建标签
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag v_cli.${{ steps.get_version.outputs.version }}
          git push origin v_cli.${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-cross:
    needs: create_release
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
    strategy:
      fail-fast: false
      matrix:
        target:
          - i686-unknown-linux-musl
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
          - armv7-unknown-linux-gnueabihf
          - arm-unknown-linux-gnueabi
          - arm-unknown-linux-gnueabihf
          - arm-unknown-linux-musleabi
          - arm-unknown-linux-musleabihf
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4
      - name: 安装 Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.target }}
          toolchain: stable
          default: true
          override: true
      - name: 安装 cross
        run: cargo install cross
      - name: 构建 ${{ matrix.target }}
        timeout-minutes: 120
        run: |
          compile_target=${{ matrix.target }}
          if [[ "$compile_target" == "mips-"* || "$compile_target" == "mipsel-"* || "$compile_target" == "mips64-"* || "$compile_target" == "mips64el-"* ]]; then
            sudo apt-get update -y && sudo apt-get install -y upx;
            if [[ "$?" == "0" ]]; then
              compile_compress="-u"
            fi
          fi
          cd build
          chmod +x build-release
          ./build-release -t ${{ matrix.target }} $compile_features $compile_compress
      - name: 上传 GitHub 资产
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v_cli.${{ needs.create_release.outputs.version }}
          name: Seam CLI ${{ needs.create_release.outputs.version }}
          body: |
            ${{ needs.create_release.outputs.changes }}
          files: build/release/*
          draft: false
          prerelease: false

  build-unix:
    needs: create_release
    runs-on: ${{ matrix.os }}
    env:
      BUILD_EXTRA_FEATURES: ''
      RUST_BACKTRACE: full
    strategy:
      matrix:
        os: [macos-latest]
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      - name: 安装 GNU tar
        if: runner.os == 'macOS'
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH
      - name: 安装 Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.target }}
          toolchain: stable
          default: true
          override: true
      - name: 构建发布版本
        shell: bash
        run: |
          chmod +x ./build/build-host-release
          ./build/build-host-release -t ${{ matrix.target }}
      - name: 上传 GitHub 资产
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v_cli.${{ needs.create_release.outputs.version }}
          name: Seam CLI ${{ needs.create_release.outputs.version }}
          body: |
            ${{ needs.create_release.outputs.changes }}
          files: build/release/*
          draft: false
          prerelease: false

  build-windows:
    needs: create_release
    runs-on: windows-latest
    env:
      RUSTFLAGS: '-C target-feature=+crt-static'
      RUST_BACKTRACE: full
    steps:
      - uses: actions/checkout@v4
      - name: 安装 Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          override: true
      - name: 构建发布版本
        run: |
          pwsh ./build/build-host-release.ps1
      - name: 上传 GitHub 资产
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v_cli.${{ needs.create_release.outputs.version }}
          name: Seam CLI ${{ needs.create_release.outputs.version }}
          body: |
            ${{ needs.create_release.outputs.changes }}
          files: build/release/*
          draft: false
          prerelease: false
